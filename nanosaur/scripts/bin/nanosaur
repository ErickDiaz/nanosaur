#!/bin/bash
# Copyright (C) 2021, Raffaello Bonghi <raffaello@rnext.it>
# All rights reserved
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its 
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

bold=`tput bold`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`

# Load nanosaur configuration file
if [ -f $HOME/.nanosaur.config ] ; then
    source $HOME/.nanosaur.config
fi

ROBOT_DISTRO="foxy"
ROBOT_NAME="nanosaur"

if [ -z ${ROS_WS_NAME+x} ]; then
    ROS_WS_NAME="nanosaur_ws"
fi
if [ -z ${ROBOT_WORKSPACE+x} ]; then
    ROBOT_WORKSPACE=/$HOME/$ROS_WS_NAME/
fi

# Modules check sudo
# https://serverfault.com/questions/266039/temporarily-increasing-sudos-timeout-for-the-duration-of-an-install-script
sudo_me()
{
    local start=$1
    # write sudo me file
    local sudo_stat="/tmp/nanosaur_sudo_status"
    # No sudo loop
    if $start ; then
        touch $sudo_stat
        # Loop script
        while [ -f $sudo_stat ]; do
            # echo "checking $$ ...$(date)"
            sudo -v
            sleep 5
        done &
    else
        if [ -f $sudo_stat ] ; then
            rm $sudo_stat
        fi
    fi
}

usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}"
	fi
	
    local name=$(basename ${0})
    echo "Robot ROS managager. Update workspaces and status. (Works with wstool)"
    echo ""
    echo "Commands:"
    echo "        $name update      Update all ROS workspace"
    echo "        $name info        Info about workspace"
    echo "        $name activate    Load all variables and workspaces for nanosaur"
}

update_usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}"
	fi
	local name=$(basename ${0})
    echo "updater. Update workspace, repositories and dependencies"
    echo "${bold}$name update${reset} [options]"
    echo "options,"
    echo "   -h|--help        | This help"
    echo "   --rosinstall     | Update rosinstall workspace"
}


update()
{
    local custom=false
    local rosinstall=false
	# Decode all information from startup
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) # Load help
                update_usage
                exit 0
                ;;
            --rosinstall)
                rosinstall=true
                ;;
            *)
                update_usage "[ERROR] Unknown option: $1"
                exit 1
                ;;
        esac
            shift 1
    done

    # Request sudo password
    #sudo -v
    #sudo_me true

    # Run update function
    local THIS="$(pwd)"

    if $rosinstall ; then
        # Load ROS2 workspace
        source /opt/ros/$ROBOT_DISTRO/setup.bash
        # Merge workspace
        wstool merge -t $ROBOT_WORKSPACE/src $ROSINSTALL_FILE
        # Update workspace
        wstool update -t $ROBOT_WORKSPACE/src
        # Status update wstool
        if [ $? -ne 0 ] ; then
            # Try to make again
            echo "${red}Please check workspace status ${reset}"
            # sudo_me false
            exit 1
        fi
        # Install all dependencies
        # http://wiki.ros.org/rosdep
        echo " ${bold}*${reset} Install all ${bold}dependencies${reset}"
        rosdep install --from-paths $ROBOT_WORKSPACE/src --ignore-src -r -y
    fi
    # Go to catkin path
    cd $ROBOT_WORKSPACE
    # Catkin make all workspace
    echo " ${bold}*${reset} ${green}colcon build${reset} $ROBOT_WORKSPACE"
    colcon build
    # Return to main path
    cd $THIS

    # Disable sudo me
    #sudo_me false
}

main()
{
    local option=$1
    # Catkin main package

    # Check if option is in list
    local options=("update" "info" "activate")
    local error=true
    for item in ${options[@]} ; do
        if [ "$item" == "$option" ]; then
            error=false
            break
        fi
    done
    if $error ; then
        if [ -z $option ] ; then
            usage
        else
            usage "[ERROR] Unknown option: $option"
        fi
        exit 1
    fi
    
	# Check if run in sudo
    if [[ `id -u` -eq 0 ]] ; then 
        echo "${red}Please don't run as root${reset}"
        exit 1
    fi
    
    # Load all arguments except the first one
    local arguments=${@:2}
    # Options
    if [ $option = "update" ] ; then
        update $arguments
    elif [ $option = "info" ] ; then
        # Update workspace
        # https://www.systutorials.com/docs/linux/man/1-wstool/
        wstool info -t "$ROBOT_WORKSPACE/src"
    elif [ $option = "activate" ] ; then
        echo "${yellow}Please run:${reset}"
        echo "source nanosaur"
    fi
}

# Detect if is sourced or not
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
if [[ $0 != $BASH_SOURCE ]] ; then

    deactivate()
    {
        # Restore .bashrc
        source /home/$USER/.bashrc
        # Restore old virtual PS1
        if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
            PS1="$_OLD_VIRTUAL_PS1"
            export PS1
            unset _OLD_VIRTUAL_PS1
        fi
    }
    # unset irrelevant variables
    deactivate nondestructive

    # Check ROS2 workspace and nanosaur workspace
    if [ ! -d /opt/ros/$ROBOT_DISTRO ] ; then
        echo "${red}ROS2 ${bold}$ROBOT_DISTRO${reset}${red} is not installed!${reset}"
        return
    fi
    if [ ! -d $ROBOT_WORKSPACE/install ] ; then
        echo "${yellow}Nanosaur workspace is missing or not builded check ${bold}$ROBOT_WORKSPACE${reset}"
        return
    fi
    # Load ROS2 workspace
    source /opt/ros/$ROBOT_DISTRO/setup.bash
    # Load Nanosaur workspace
    source $ROBOT_WORKSPACE/install/setup.bash
    # Setup PS1
    _OLD_VIRTUAL_PS1="$PS1"
    if [ "x" != x ] ; then
        PS1="$PS1"
    else
        PS1="${bold}($ROBOT_NAME)${reset} $PS1"
    fi
    export PS1

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
        hash -r 2>/dev/null
    fi
else
    main $@
    exit 0
fi

# EOF
