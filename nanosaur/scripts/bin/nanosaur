#!/bin/bash
# Copyright (C) 2021, Raffaello Bonghi <raffaello@rnext.it>
# All rights reserved
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its 
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

bold=`tput bold`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`

# Load platform
# - aarch64 = NVIDIA Jetson
# - x86_64 = Desktop
PLATFORM="$(uname -m)"

ROBOT_NAME='nanosaur'
ROS2_PATH='/opt/ros/foxy/setup.bash'
ROS_WS_NAME="nanosaur_ws"
NANOSAUR_WORKSPACE=$HOME/$ROS_WS_NAME
NANOSAUR_DOCKER='/opt/nanosaur'
# Load nanosaur configuration file
if [ -f $HOME/.nanosaur.config ] ; then
    source $HOME/.nanosaur.config
    echo "${green}Nanosaur config loaded${reset}" >&2
fi
# Load rosinstall configuration
ROSINSTALL_FILE="https://raw.githubusercontent.com/rnanosaur/nanosaur/master/nanosaur/rosinstall/desktop.rosinstall"
if [[ $PLATFORM = "aarch64" ]] ; then
    ROSINSTALL_FILE="https://raw.githubusercontent.com/rnanosaur/nanosaur/master/nanosaur/rosinstall/robot.rosinstall"
fi

# Modules check sudo
# https://serverfault.com/questions/266039/temporarily-increasing-sudos-timeout-for-the-duration-of-an-install-script
sudo_me()
{
    local start=$1
    # write sudo me file
    local sudo_stat="/tmp/nanosaur_sudo_status"
    # No sudo loop
    if $start ; then
        touch $sudo_stat
        # Loop script
        while [ -f $sudo_stat ]; do
            # echo "checking $$ ...$(date)"
            sudo -v
            sleep 5
        done &
    else
        if [ -f $sudo_stat ] ; then
            rm $sudo_stat
        fi
    fi
}

usage()
{
    if [ "$1" != "" ]; then
        echo "${red}$1${reset}" >&2
    fi

    local name=$(basename ${0})
    echo "Robot ROS managager. Update workspaces and status." >&2
    echo "" >&2
    echo "Commands:" >&2
    echo "  $name info            nanosaur status" >&2
    if [[ $PLATFORM = "aarch64" ]]; then
        echo "  $name update            Update docker and scripts" >&2
        echo "  $name run   [CMD:bash]  Run a new docker with all device and volumes" >&2
        echo "  $name dev   [reset]     Enable developer mode. Use reset to restore" >&2
    else
        echo "  $name update      Update all robot workspace" >&2
        echo "  $name activate    Load all variables and workspaces for nanosaur" >&2
    fi
}

update_usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}" >&2
	fi
	local name=$(basename ${0})
    echo "updater. Update workspace, repositories and dependencies" >&2
    echo "${bold}$name update${reset} [options]" >&2
    echo "options," >&2
    echo "   -h|--help        | This help" >&2
    echo "   --rosinstall     | Update rosinstall workspace" >&2
}

update()
{
    local custom=false
    local rosinstall=false
	# Decode all information from startup
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) # Load help
                update_usage
                exit 0
                ;;
            --rosinstall)
                rosinstall=true
                ;;
            *)
                update_usage "[ERROR] Unknown option: $1" >&2
                exit 1
                ;;
        esac
            shift 1
    done

    # Run update function
    local THIS="$(pwd)"

    if $rosinstall ; then
        # Load ROS2 workspace
        source $ROS2_PATH
        # Merge workspace
        wstool merge -t $NANOSAUR_WORKSPACE/src $ROSINSTALL_FILE
        # Update workspace
        wstool update -t $NANOSAUR_WORKSPACE/src
        # Status update wstool
        if [ $? -ne 0 ] ; then
            # Try to make again
            echo "${red}Please check workspace status ${reset}"
            # sudo_me false
            exit 1
        fi
        # Install all dependencies
        # http://wiki.ros.org/rosdep
        echo " ${bold}*${reset} Install all ${bold}dependencies${reset}"
        rosdep install --from-paths $NANOSAUR_WORKSPACE/src --ignore-src -r -y
    else
        # Update workspace
        wstool update -t $NANOSAUR_WORKSPACE/src
    fi
    # Go to catkin path
    cd $NANOSAUR_WORKSPACE
    # Catkin make all workspace
    echo " ${bold}*${reset} ${green}colcon build${reset} $(basename $NANOSAUR_WORKSPACE)"
    colcon build
    # Return to main path
    cd $THIS
}

main()
{
    local option=$1
    # Catkin main package

    # Check if option is in list
    local options=("update" "info" "activate" "run" "help" "dev")
    local error=true
    for item in ${options[@]} ; do
        if [ "$item" == "$option" ]; then
            error=false
            break
        fi
    done
    if $error ; then
        if [ -z $option ] ; then
            usage
        else
            usage "[ERROR] Unknown option: $option" >&2
        fi
        exit 1
    fi

	# Check if run in sudo
    if [[ `id -u` -eq 0 ]] ; then 
        echo "${red}Please don't run as root${reset}" >&2
        exit 1
    fi
    
    # Load all arguments except the first one
    local arguments=${@:2}
    # Options
    if [ $option = "help" ] ; then
        usage
    fi
    # Desktop options
    if [ $PLATFORM = "x86_64" ] ; then
        if [ $option = "info" ] ; then
            # Update workspace
            # https://www.systutorials.com/docs/linux/man/1-wstool/
            wstool info -t "$NANOSAUR_WORKSPACE/src"
        elif [ $option = "update" ] ; then
            update $arguments
        elif [ $option = "activate" ] ; then
            echo "${yellow}Please run:${reset}" >&2
            echo "source nanosaur" >&2
        fi
    else
        # NVIDIA Jetson options
        if [ $option = "info" ] ; then
            local docker_cmd="ps -a"
            if [ ! -z "$arguments" ] ; then
                docker_cmd=$arguments
            fi
            docker-compose -f $NANOSAUR_DOCKER/docker-compose.yml $docker_cmd
            echo "-------------------------------------------------------------------------" >&2
            echo "- nanosaur config is located in ${bold}$NANOSAUR_DOCKER${reset}" >&2
            if [ -f $NANOSAUR_DOCKER/.env ] ; then
                echo "- nanosaur in ${yellow}${bold}developer${reset} mode" >&2
            fi
        elif [ $option = "update" ] ; then
            # Update docker-compose
            if [ -d $NANOSAUR_WORKSPACE ] ; then
                echo " - ${bold}${green}Copy Nanosaur docker-compose${reset}" >&2
                cp $NANOSAUR_WORKSPACE/src/nanosaur/docker-compose.yml $NANOSAUR_DOCKER/docker-compose.yml
            else
                # Download latest version nanosaur docker-compose
                echo " - ${bold}${green}Download Nanosaur docker-compose${reset}" >&2
                # Download the docker-compose image and run
                curl https://raw.githubusercontent.com/rnanosaur/nanosaur/master/docker-compose.yml -o $NANOSAUR_DOCKER/docker-compose.yml
            fi
            # Re-run the docker compose
            local docker_cmd="up -d"
            if [ ! -z "$arguments" ] ; then
                docker_cmd=$arguments
            fi
            echo " - ${bold}${green}Pull and restart all containers${reset}" >&2
            docker-compose -f $NANOSAUR_DOCKER/docker-compose.yml $docker_cmd
        elif [ $option = "dev" ] ; then
            if [ "$arguments" = "reset" ] ; then
                echo "Restore ${green}nanosaur${reset} mode" >&2
                if [ -f $NANOSAUR_DOCKER/.env ] ; then
                    rm $NANOSAUR_DOCKER/.env
                fi
            else
                echo "Setup ${green}nanosaur${reset} in ${bold}developer${reset} mode" >&2
                # https://docs.docker.com/compose/compose-file/compose-file-v3/#variable-substitution
                echo "TAG=master" > $NANOSAUR_DOCKER/.env
            fi
            # Relaunch docker-compose
            docker-compose -f $NANOSAUR_DOCKER/docker-compose.yml up -d
        elif [ $option = "run" ] ; then
            local docker_cmd="bash"
            if [ ! -z "$arguments" ] ; then
                docker_cmd=$arguments
            fi
            echo "${green}Run a new nanosaur docker${reset}" >&2
            # Check if exist .env file
            local TAG=latest
            if [ -f $NANOSAUR_DOCKER/.env ] ; then
                TAG=master
                echo "- ${yellow}You are working with developer version docker${reset}" >&2
            fi
            local WORKSPACE_DOCKER=""
            # Check if exist nanosaur workspace on robot folder
            if [ -d $NANOSAUR_WORKSPACE ] && [ -f $NANOSAUR_DOCKER/.env ] ; then
                echo "- Load volume $NANOSAUR_WORKSPACE" >&2
                WORKSPACE_DOCKER="-v $NANOSAUR_WORKSPACE/src:/opt/ros_ws/src/"
            fi
            echo "---------------------------------" >&2
            docker run --runtime nvidia -it --rm --network host \
                        --device /dev/i2c-0 \
                        --device /dev/i2c-1 \
                        --device /dev/input \
                        -v /tmp/argus_socket:/tmp/argus_socket \
                        -v /run/jtop.sock:/run/jtop.sock \
                        $WORKSPACE_DOCKER \
                        nanosaur/nanosaur:$TAG $docker_cmd
        fi
    fi
}


# Detect if is sourced or not
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
if [ "${BASH_SOURCE-}" = "$0" ] ; then
    main $@
    exit 0
fi

# Check if is running on Desktop platform
if [ $PLATFORM != "x86_64" ] ; then
    echo "${red}You must source this script only from a Desktop machine${reset}" >&2
    return
fi

deactivate () {

    # https://stackoverflow.com/questions/8760505/is-it-possible-to-unsource-in-bash
    # Restore .bashrc
    if [ ! "${1-}" = "nondestructive" ] ; then
        exec bash
    fi

    # The hash command must be called to get it to forget past
    # commands. Without forgetting past commands the $PATH changes
    # we made may not be respected
    hash -r 2>/dev/null

    if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
        PS1="$_OLD_VIRTUAL_PS1"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset VIRTUAL_ENV
    if [ ! "${1-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelevant variables
deactivate nondestructive

# Check ROS2 workspace and nanosaur workspace
if [ ! -d $(dirname $ROS2_PATH) ] ; then
    echo "${red}ROS2 is not installed in $(dirname $ROS2_PATH)${reset}" >&2
    return
fi
# Load ROS2 workspace
source $ROS2_PATH

if [ ! -d $NANOSAUR_WORKSPACE/install ] ; then
    echo "${yellow}Nanosaur workspace is missing or not builded check ${bold}$NANOSAUR_WORKSPACE${reset}" >&2
else
    # Load Nanosaur workspace
    source $NANOSAUR_WORKSPACE/install/setup.bash
fi

# Setup PS1
if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT-}" ] ; then
    _OLD_VIRTUAL_PS1="${PS1-}"
    # Rewrite PS1
    PS1="${bold}($ROBOT_NAME)${reset} ${PS1-}"
    export PS1
fi

# The hash command must be called to get it to forget past
# commands. Without forgetting past commands the $PATH changes
# we made may not be respected
hash -r 2>/dev/null
# EOF
