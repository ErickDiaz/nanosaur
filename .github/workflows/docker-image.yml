name: Docker Builder CI

# Reference:
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on: [push, pull_request, repository_dispatch]

# https://github.com/docker/build-push-action
jobs:

  export:
    name: Make all artifacts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        bash nanosaur_description/scripts/nanosaur_stl.sh
    - name: upload results
      uses: actions/upload-artifact@v2
      with:
        name: data
        path: nanosaur_stl.zip

  docker:
    name: "Build and push Docker image develop"
    runs-on: ubuntu-latest #self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        tags: nanosaur/nanosaur:dev
        outputs: type=docker,dest=/tmp/nanosaur.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: nanosaur
        path: /tmp/nanosaur.tar
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  docker_deploy:
    name: "Deploy Docker image"
    runs-on: ubuntu-latest #self-hosted
    needs: [docker]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: nanosaur
        path: /tmp
    - name: Load Docker image
      run: |
        docker load --input /tmp/nanosaur.tar
        docker image ls -a
    - name: Push Docker image
      run: |
        docker push nanosaur:dev
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  release_stl:
    name: Upload release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [export]
    steps:
    - name: Extract artifact
      uses: actions/download-artifact@v2
      with:
        name: data
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./nanosaur_stl.zip
        asset_name: nanosaur_stl.zip
        asset_content_type: application/zip

  docker_deploy:
    name: "Deploy Docker image"
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest #self-hosted
    needs: [export]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: nanosaur
        path: /tmp
    - name: Load Docker image
      run: |
        docker load --input /tmp/nanosaur.tar
        docker image ls -a
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  
  notify:
    name: "Notify socials"
    needs: [release_stl, docker]
    runs-on: ubuntu-latest #self-hosted
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'
